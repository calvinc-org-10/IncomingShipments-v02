class Invoice_singleForm(QWidget):
    def __init__(self, InvRec:Invoices = None, HBLRec:HBL = None, parent = None):
        super().__init__(parent)
        
        if InvRec: 
            self.currRec = InvRec
        else:
            self.currRec = self.createNewRec(InvNumber=None,HBLref=HBLRec)
        #endif
        
        # self.resize(780, 190)
        font = QFont()
        font.setPointSize(10)
        self.setFont(font)

        self.gridLayout = QGridLayout(self)
        self.gridLayout.setObjectName(u"gridLayout")
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        
        self.lblRecID = QLabel(self)
        wdgt = self.lblRecID
        wdgt.setObjectName(u"label_3")
        self.gridLayout.addWidget(wdgt, 0, 0)

        self.lblSmOffForm = QLabel(self)
        self.lnedtSmOffFm = QLineEdit(self)
        wdgt = self.lnedtSmOffFm; wdgtlbl = self.lblSmOffForm
        wdgtlbl.setObjectName(u"label")
        wdgt.setObjectName(u"lineEdit")
        wdgt.setProperty('field', 'id_SmOffFormNum')
        wdgt.editingFinished.connect(lambda: self.changeField(self.lnedtSmOffFm))
        self.gridLayout.addWidget(wdgtlbl, 1, 1)
        self.gridLayout.addWidget(wdgt, 1, 2)

        self.lblSmOffStat = QLabel(self)
        self.cmbSmOffStat = IncShipAppchoiceWidgets.chooseSmOffInvStatus(parent=self)
        wdgt = self.cmbSmOffStat; wdgtlbl = self.lblSmOffStat
        wdgtlbl.setObjectName(u"label_2")
        wdgt.setObjectName(u"comboBox")
        wdgt.setProperty('field', 'SmOffStatus')
        wdgt.currentIndexChanged.connect(lambda indx: self.changeField(self.cmbSmOffStat))
        self.gridLayout.addWidget(wdgtlbl, 1, 3)
        self.gridLayout.addWidget(wdgt, 1, 4)

        self.lblCompany = QLabel(self)
        self.cmbCompany = IncShipAppchoiceWidgets.chooseCompany(parent=self)
        wdgt = self.cmbCompany; wdgtlbl = self.lblCompany
        wdgtlbl.setObjectName(u"label_4")
        wdgt.setObjectName(u"comboBox_2")
        wdgt.setProperty('field', 'Company')
        wdgt.currentIndexChanged.connect(lambda indx: self.changeField(self.cmbCompany))
        self.gridLayout.addWidget(wdgtlbl, 2, 1)
        self.gridLayout.addWidget(wdgt, 2, 2)

        self.lblInvNum = QLabel(self)
        self.lnedtInvNum = QLineEdit(self)
        wdgt = self.lnedtInvNum; wdgtlbl = self.lblInvNum
        wdgtlbl.setObjectName(u"label_5")
        wdgt.setObjectName(u"lineEdit_2")
        wdgt.setProperty('field', 'InvoiceNumber')
        wdgt.editingFinished.connect(lambda: self.changeField(self.lnedtInvNum))
        self.gridLayout.addWidget(wdgtlbl, 2, 3)
        self.gridLayout.addWidget(wdgt, 2, 4)

        self.lblInvDt = QLabel(self)
        self.dtedtInvDt = QDateEdit(self)
        wdgt = self.dtedtInvDt; wdgtlbl = self.lblInvDt
        wdgtlbl.setObjectName(u"label_6")
        wdgt.setObjectName(u"dateEdit")
        wdgt.setDisplayFormat(_DATE_FORMAT)
        wdgt.setProperty('field', 'InvoiceDate')
        wdgt.userDateChanged.connect(lambda indx: self.changeField(self.dtedtInvDt))
        self.gridLayout.addWidget(wdgtlbl, 2, 5)
        self.gridLayout.addWidget(wdgt, 2, 6)

        self.lblAmount = QLabel(self)
        self.lnedtAmount = QLineEdit(self)
        wdgt = self.lnedtAmount; wdgtlbl = self.lblAmount
        wdgtlbl.setObjectName(u"label_7")
        wdgt.setObjectName(u"lineEdit_3")
        wdgt.setProperty('field', 'InvoiceAmount')
        wdgt.editingFinished.connect(lambda: self.changeField(self.lnedtAmount))
        self.gridLayout.addWidget(wdgtlbl, 2, 7)
        self.gridLayout.addWidget(wdgt, 2, 8)

        self.lblHBL = QLabel(self)
        self.dlistHBL = IncShipAppchoiceWidgets.chooseHBL(initval=str(InvRec.HBL) if InvRec else '', parent=self)
        wdgt = self.dlistHBL; wdgtlbl = self.lblHBL
        wdgtlbl.setObjectName(u"label_8")
        wdgt.setObjectName(u"lineEdit_4")
        wdgt.setProperty('field', 'HBL')
        wdgt.editingFinished.connect(lambda: self.changeField(self.dlistHBL))
        self.gridLayout.addWidget(wdgtlbl, 3, 1)
        self.gridLayout.addWidget(wdgt, 3, 2)

        self.lblAddlBillInv = QLabel(self)
        self.dlistAddlBillInv = IncShipAppchoiceWidgets.chooseInvoice(initval=str(InvRec.AddlBillingForInv) if InvRec else '', parent=self)
        wdgt = self.dlistAddlBillInv; wdgtlbl = self.lblAddlBillInv
        wdgtlbl.setObjectName(u"label_10")
        wdgt.setObjectName(u"lineEdit_5")
        wdgt.setProperty('field', 'AddlBillingForInv')
        wdgt.editingFinished.connect(lambda: self.changeField(self.dlistAddlBillInv))
        self.gridLayout.addWidget(wdgtlbl, 3, 4)
        self.gridLayout.addWidget(wdgt, 3, 5, 1, 2)

        self.lblnotes = QLabel(self)
        self.txtedtnotes = QTextEdit(self)
        wdgt = self.txtedtnotes; wdgtlbl = self.lblnotes
        wdgtlbl.setObjectName(u"label_9")
        wdgt.setObjectName(u"textEdit")
        wdgt.setProperty('field', 'notes')
        wdgt.textChanged.connect(lambda: self.changeField(self.txtedtnotes))
        self.gridLayout.addWidget(wdgtlbl, 4, 0)
        self.gridLayout.addWidget(wdgt, 4, 1, 1, 8)

        self.layoutVerified = QHBoxLayout()
        self.chkbxVerified = QCheckBox(self)
        wdgt = self.chkbxVerified
        wdgt.setObjectName(u"checkBox")
        wdgt.setProperty('field', 'verifiedForFii')
        wdgt.checkStateChanged.connect(lambda newstate: self.changeField(self.chkbxVerified))
        self.lnedtVerified = QLineEdit(self)
        self.lnedtVerified.setProperty('field', 'verifiedForFii')
        self.lnedtVerified.setReadOnly(True)
        self.lnedtVerified.setFrame(False)
        self.lnedtVerified.setMaximumWidth(40)
        self.lnedtVerified.setFocusPolicy(Qt.FocusPolicy.NoFocus)
        self.layoutVerified.addWidget(self.lnedtVerified)
        self.layoutVerified.addWidget(wdgt)
        self.gridLayout.addLayout(self.layoutVerified, 0, 1, 1, 2)

        self.layoutInvDL = QHBoxLayout()
        self.chkbxInvDL = QCheckBox(self)
        wdgt = self.chkbxInvDL
        wdgt.setObjectName(u"checkBox_2")
        wdgt.setProperty('field', 'inv_downloaded')
        wdgt.checkStateChanged.connect(lambda newstate: self.changeField(self.chkbxInvDL))
        self.lnedtInvDL = QLineEdit(self)
        self.lnedtInvDL.setProperty('field', 'inv_downloaded')
        self.lnedtInvDL.setReadOnly(True)
        self.lnedtInvDL.setFrame(False)
        self.lnedtInvDL.setMaximumWidth(40)
        self.lnedtInvDL.setFocusPolicy(Qt.FocusPolicy.NoFocus)
        self.layoutInvDL.addWidget(self.lnedtInvDL)
        self.layoutInvDL.addWidget(wdgt)
        self.gridLayout.addLayout(self.layoutInvDL, 0, 4, 1, 2)
        
        self.btnCommit = QPushButton(self)
        wdgt = self.btnCommit
        wdgt.setObjectName(u"btnCommit")
        wdgt.clicked.connect(lambda: self.writeRecord())
        self.gridLayout.addWidget(wdgt, 0, 7)

        # set tab order
        
        self.retranslateUi()
        
        self.fillFormFromcurrRec()
    # setupUi

    def retranslateUi(self):
        self.lblSmOffStat.setText(QCoreApplication.translate("Frame", u"SmOff Status", None))
        self.chkbxVerified.setText(QCoreApplication.translate("Frame", u"verified for fii?", None))
        self.lblCompany.setText(QCoreApplication.translate("Frame", u"Company", None))
        self.chkbxInvDL.setText(QCoreApplication.translate("Frame", u"Inv dl?", None))
        self.lblAmount.setText(QCoreApplication.translate("Frame", u"Inv Amount", None))
        self.lblInvNum.setText(QCoreApplication.translate("Frame", u"Inv #", None))
        self.lblnotes.setText(QCoreApplication.translate("Frame", u"notes", None))
        self.lblAddlBillInv.setText(QCoreApplication.translate("Frame", u"Addl Billing For Invoice", None))
        self.lblInvDt.setText(QCoreApplication.translate("Frame", u"Inv Date", None))
        self.lblHBL.setText(QCoreApplication.translate("Frame", u"HBL", None))
        self.lblSmOffForm.setText(QCoreApplication.translate("Frame", u"SmOff FmNum", None))
        self.btnCommit.setText(QCoreApplication.translate('Form','Save Changes',None))
    # retranslateUi

    ##########################################
    ########    Create

    def createNewRec(self, InvNumber:str = None, HBLref:str|HBL|None = None) -> Invoices:
        # HBLNumber - pass in str or a record or an id? or handle any of those?
        newRec = Invoices(
            SmOffStatus = Invoices.SmOffStatusCodes.NOTENT,
            inv_downloaded = False,
            verifiedForFii = False,
            notes = '',
            )
        if InvNumber: newRec.InvoiceNumber = InvNumber
        if HBLref: 
            if isinstance(HBLref, str|int):
                newRec.HBL = HBL.objects.get_or_create(
                    HBLNumber=str(HBLref), 
                    defaults={
                        'incoterm': '',
                        'notes': '',
                })
            elif isinstance(HBLref, HBL):
                newRec.HBL = HBLref
            #endif HBLref type
        
        return newRec
        

    ##########################################
    ########    Read

    def fillFormFromcurrRec(self):
        cRec:Invoices = self.currRec
        
        # set pk display
        self.lblRecID.setText(str(cRec.pk))
        
        # move to class var?
        forgnKeys = {
            'id': cRec if cRec else '',
            'Company': cRec.Company if cRec else '',
            'HBL': cRec.HBL if cRec.HBL_id else '',
            }
        # move to class var?
        valu_transform_flds = {
            'InvoiceAmount': (
                str, 
                lambda value: decimal.Decimal(value.replace("$", "").replace(",", "").replace(" ",""))
                ),
            'SmOffStatus': (
                lambda code: Invoices.SmOffStatusCodes.__call__(code).label if code in Invoices.SmOffStatusCodes else None,
                lambda code: code
                ),
            'AddlBillingForInv': (
                lambda value: str(value) if value else '',
                lambda value: value,
            ),
        }
        for field in cRec._meta.get_fields():
            field_value = getattr(cRec, field.name, None)
            field_valueStr = str(field_value)
            if field.name in forgnKeys:
                field_valueStr = str(forgnKeys[field.name])
            if field.name in valu_transform_flds:
                field_valueStr = valu_transform_flds[field.name][0](field_value)
            
            for wdgt in self.findChildren(QWidget):
                if wdgt.property('field') == field.name:
                    # set wdgt value to field_value
                    # must set value per widget type
                    if any([wdgt.inherits(tp) for tp in ['QLineEdit', ]]):
                        wdgt.setText(field_valueStr)
                    elif any([wdgt.inherits(tp) for tp in ['QTextEdit', ]]):
                        wdgt.setPlainText(field_valueStr)
                    elif any([wdgt.inherits(tp) for tp in ['QComboBox', ]]):
                        chNum = wdgt.findData(field_valueStr)
                        if chNum == -1: 
                            wdgt.setCurrentText(field_valueStr)
                        else:
                            wdgt.setCurrentIndex(chNum)
                        #endif findData valid
                    elif any([wdgt.inherits(tp) for tp in ['QDateEdit', ]]):
                        wdgt.setDate(field_value)
                    elif any([wdgt.inherits(tp) for tp in ['QCheckBox', ]]):
                        wdgt.setChecked(field_value if isinstance(field_value,bool) else False)
                    # endif widget type test

                    break   # we found the widget for this field; we don't need to keep testing widgets
                # endif widget field = field.name
            # endfor wdgt in self.children()
        #endfor field in cRec
        
        # exception to the rule; the two chekbox YES/No exposewrs
        wdgt = self.lnedtVerified
        wdgt.setText('YES' if getattr(cRec, wdgt.property('field'), False) else 'NO') 
        wdgt = self.lnedtInvDL
        wdgt.setText('YES' if getattr(cRec, wdgt.property('field'), False) else 'NO') 
        
        self.setFormDirty(self, False)
    # fillFormFromRec


    ##########################################
    ########    Update

    @Slot()
    def changeField(self, wdgt:QWidget) -> bool:
        iWannaDebug = False
        if iWannaDebug and (wdgt == self.chkbxInvDL or wdgt == self.chkbxVerified):
            breakpoint()
            
        # move to class var?
        forgnKeys = {   
            'Company',
            'HBL',
            'AddlBillingForInv',
            }
        # move to class var?
        valu_transform_flds = {
            'InvoiceAmount': (
                str, 
                lambda value: decimal.Decimal(value.replace("$", "").replace(",", "").replace(" ",""))
                ),
            'SmOffStatus': (
                lambda code: Invoices.SmOffStatusCodes.__call__(code).label if code in Invoices.SmOffStatusCodes else None,
                lambda code: code
                ),
            'AddlBillingForInv': (
                lambda value: str(value) if value else '',
                lambda value: value,
            ),
        }
        cRec:Invoices = self.currRec
        dbField = wdgt.property('field')

        wdgt_value = None

        #TODO: write cUtil getQWidgetValue(wdgt), setQWidgetValue(wdgt)
        #widgtype = wdgt.staticMetaObject.className()
        if any([wdgt.inherits(tp) for tp in ['cDataList', ]]):  # I hope I hope I hope
            kees = wdgt.selectedItem()['keys']
            wdgt_value = kees[0] if kees else wdgt.text()
        elif any([wdgt.inherits(tp) for tp in ['QLineEdit', ]]):
            wdgt_value = wdgt.text()
        elif any([wdgt.inherits(tp) for tp in ['QTextEdit', ]]):
            wdgt_value = wdgt.toPlainText()
        elif any([wdgt.inherits(tp) for tp in ['QComboBox', ]]):
            wdgt_value = wdgt.currentData()
        elif any([wdgt.inherits(tp) for tp in ['QDateEdit', ]]):
            wdgt_value = wdgt.date().toPython()
        elif any([wdgt.inherits(tp) for tp in ['QCheckBox', ]]):
            wdgt_value = wdgt.isChecked()
        # endif widget type test

        if dbField in forgnKeys:
            dbField += '_id'
        if dbField in valu_transform_flds:
            wdgt_value = valu_transform_flds[dbField][1](wdgt_value)

        # offer to add HBL if nonexistent
        if dbField == "HBL_id" and wdgt_value:
            wdgt_value_asnum = -1
            try:
                wdgt_value_asnum = int(wdgt_value)
            except ValueError:
                pass
            #end try
            if not HBL.objects.filter(pk=wdgt_value_asnum).exists():
                ans = QMessageBox.question(
                    self, 
                    "Create HBL?", f'HBL {wdgt_value} does not exist. Create it?',
                    QMessageBox.StandardButton.Yes|QMessageBox.StandardButton.No,
                    QMessageBox.StandardButton.No
                    )
                if ans == QMessageBox.StandardButton.No:
                    self.dlistHBL.clear()
                    self.dlistHBL.setFocus()
                    return
                else:
                    HBLrec = HBL.objects.create(
                        HBLNumber=str(wdgt.text()),      # str(wdgt.selectedItem()['text']), 
                        incoterm = '',
                        notes = '',
                    )
                    wdgt_value = HBLrec.pk
                    # add this new HBL to the dlist
                    self.dlistHBL.addChoices({wdgt_value: wdgt.text()})
                #endif ans == QMessageBox.StandardButton.No
            # endif HBL not exists
        # endif dbField == "HBL"

        if wdgt_value or isinstance(wdgt_value,bool):
            setattr(cRec, dbField, wdgt_value)
            self.setFormDirty(wdgt, True)

            # exception to the rule; the two chekbox YES/No exposewrs
            specialwdgt = self.lnedtVerified
            if dbField == specialwdgt.property('field'):
                specialwdgt.setText('YES' if getattr(cRec, specialwdgt.property('field'), False) else 'NO') 
            specialwdgt = self.lnedtInvDL
            if dbField == specialwdgt.property('field'):
                specialwdgt.setText('YES' if getattr(cRec, specialwdgt.property('field'), False) else 'NO') 
        
            return True
        else:
            return False
        # endif wdgt_value
    # changeField
    
    def writeRecord(self):
        if not self.isFormDirty():
            return
        
        cRec:Invoices = self.currRec
        newrec = (cRec is None)
        
        #TODO: There must also be a Company, and it's (Company, InvoiceNumber) that needs to be unique
        # There MUST be a InvoiceNumber, and it can't belong to another record
        if not cRec.InvoiceNumber:
            QMessageBox(QMessageBox.Icon.Critical, 'Must provide Invoice Number','You must provide a Invoice Number!',
                QMessageBox.StandardButton.Ok, self).show()
            self.lnedtInvNum.setFocus()
            return
        existingrec = [R.pk for R in Invoices.objects.filter(InvoiceNumber=cRec.InvoiceNumber)]
        if len(existingrec) and cRec.pk not in existingrec:
            QMessageBox(QMessageBox.Icon.Critical, 'Invoice Number Exists', f'Invoice {cRec.InvoiceNumber} exists in another record!',
                QMessageBox.StandardButton.Ok, self).show()
            self.lnedtInvNum.clear()
            self.lnedtInvNum.setFocus()
            return
        
        #There must be an HBL
        if not cRec.HBL:
            QMessageBox(QMessageBox.Icon.Critical, 'Must provide HBL','You must provide a HBL!',
                QMessageBox.StandardButton.Ok, self).show()
            self.dlistHBL.setFocus()
            return
        # existence was handled when the HBL was entered
        
        # check other traps later
        
        cRec.save()
        pk = cRec.pk
        self.lblRecID.setText(str(pk))
        
        if newrec:
            # add this record to self.gotoHBL.completer().model()
            ...
            
        self.setFormDirty(self, False)
    # writeRecord


    ##########################################
    ########    Delete

    # Delete not supported yet


    ##########################################
    ########    CRUD support

    @Slot()
    def setFormDirty(self, wdgt:QWidget, dirty:bool = True):
        wdgt.setProperty('dirty', dirty)
        # if wdgt === self, set all children dirty
        if wdgt is not self:
            if dirty: self.setProperty('dirty',True)
        else:
            for W in self.children():
                if any([W.inherits(tp) for tp in ['QLineEdit', 'QTextEdit', 'QCheckBox', 'QComboBox', 'QDateEdit', ]]):
                    W.setProperty('dirty', dirty)
        
        # enable btnCommit if anything dirty
        self.btnCommit.setEnabled(self.property('dirty'))
    
    def isFormDirty(self) -> bool:
        return self.property('dirty')


    ##########################################
    ########    Widget-responding procs

